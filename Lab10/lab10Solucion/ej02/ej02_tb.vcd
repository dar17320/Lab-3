$date
	Sun Nov 15 20:04:06 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! busOutput [3:0] $end
$var wire 4 " accu [3:0] $end
$var wire 1 # Z $end
$var wire 1 $ C $end
$var reg 3 % F [2:0] $end
$var reg 1 & buffIn $end
$var reg 1 ' buffOut $end
$var reg 4 ( busInput [3:0] $end
$var reg 1 ) clk $end
$var reg 1 * enAccu $end
$var reg 1 + reset $end
$scope module U1 $end
$var wire 3 , F [2:0] $end
$var wire 4 - busInput [3:0] $end
$var wire 1 ) clk $end
$var wire 1 * enAccu $end
$var wire 1 & enBuff1 $end
$var wire 1 ' enBuff2 $end
$var wire 1 + reset $end
$var wire 4 . data_bus [3:0] $end
$var wire 4 / busOutput [3:0] $end
$var wire 4 0 aluResult [3:0] $end
$var wire 4 1 accu [3:0] $end
$var wire 1 # Z $end
$var wire 1 $ C $end
$scope module U1 $end
$var wire 4 2 A [3:0] $end
$var wire 1 & enabled $end
$var wire 4 3 Y [3:0] $end
$upscope $end
$scope module U2 $end
$var wire 1 ' enabled $end
$var wire 4 4 Y [3:0] $end
$var wire 4 5 A [3:0] $end
$upscope $end
$scope module U3 $end
$var wire 4 6 B [3:0] $end
$var wire 3 7 F [2:0] $end
$var wire 1 # Z $end
$var wire 4 8 S [3:0] $end
$var wire 1 $ C $end
$var wire 4 9 A [3:0] $end
$var reg 5 : regS [4:0] $end
$upscope $end
$scope module U4 $end
$var wire 4 ; D [3:0] $end
$var wire 1 ) clk $end
$var wire 1 * enabled $end
$var wire 1 + reset $end
$var reg 4 < Q [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx <
bx ;
b0xxxx :
bx 9
bx 8
b0 7
bz 6
bx 5
bz 4
bz 3
b0 2
bx 1
bx 0
bz /
bz .
b0 -
b0 ,
0+
0*
0)
b0 (
0'
0&
b0 %
0$
x#
bx "
bz !
$end
#2
1#
b0 0
b0 5
b0 8
b0 ;
b0 :
b0 "
b0 1
b0 9
b0 <
1+
#3
0+
#4
0#
b1010 0
b1010 5
b1010 8
b1010 ;
b1010 :
b1010 !
b1010 /
b1010 4
b1010 .
b1010 3
b1010 6
b1010 (
b1010 -
b1010 2
b10 %
b10 ,
b10 7
1*
1'
1&
#5
b1010 "
b1010 1
b1010 9
b1010 <
1)
#10
0)
#14
b1011 !
b1011 /
b1011 4
b1011 0
b1011 5
b1011 8
b1011 ;
b1011 :
b1 .
b1 3
b1 6
b11 %
b11 ,
b11 7
b1 (
b1 -
b1 2
#15
b1100 !
b1100 /
b1100 4
b1100 0
b1100 5
b1100 8
b1100 ;
b1100 :
b1011 "
b1011 1
b1011 9
b1011 <
1)
#20
0)
#24
bz !
bz /
bz 4
0'
#25
b1101 0
b1101 5
b1101 8
b1101 ;
b1101 :
b1100 "
b1100 1
b1100 9
b1100 <
1)
#30
0)
#32
b1101 !
b1101 /
b1101 4
1'
#34
x#
bx !
bx /
bx 4
bx 0
bx 5
bx 8
bx ;
x$
bx :
bz .
bz 3
bz 6
0&
#35
bx "
bx 1
bx 9
bx <
1)
#40
0)
#44
0$
b0xxxx :
b0 %
b0 ,
b0 7
#45
1)
#50
0)
#54
0#
b1 !
b1 /
b1 4
b1 0
b1 5
b1 8
b1 ;
b1 :
b1 .
b1 3
b1 6
b10 %
b10 ,
b10 7
1&
#55
b1 "
b1 1
b1 9
b1 <
1)
#59
b0 %
b0 ,
b0 7
#60
0)
#64
1#
b0 !
b0 /
b0 4
b0 0
b0 5
b0 8
b0 ;
b0 :
b1 %
b1 ,
b1 7
#65
0#
b1111 !
b1111 /
b1111 4
b1111 0
b1111 5
b1111 8
b1111 ;
1$
b11111 :
b0 "
b0 1
b0 9
b0 <
1)
#70
0)
#75
b1110 !
b1110 /
b1110 4
b1110 0
b1110 5
b1110 8
b1110 ;
0$
b1110 :
b1111 "
b1111 1
b1111 9
b1111 <
1)
#80
0)
#85
b1101 !
b1101 /
b1101 4
b1101 0
b1101 5
b1101 8
b1101 ;
b1101 :
b1110 "
b1110 1
b1110 9
b1110 <
1)
#90
0)
#94
1#
b0 !
b0 /
b0 4
b0 0
b0 5
b0 8
b0 ;
b0 :
b0 .
b0 3
b0 6
b10 %
b10 ,
b10 7
b0 (
b0 -
b0 2
#95
b0 "
b0 1
b0 9
b0 <
1)
#100
0)
#104
b0 %
b0 ,
b0 7
#105
1)
#110
0)
#114
0#
b101 !
b101 /
b101 4
b101 0
b101 5
b101 8
b101 ;
b101 :
b101 .
b101 3
b101 6
b10 %
b10 ,
b10 7
b101 (
b101 -
b101 2
0*
#115
1)
#120
0)
#124
1*
#125
b101 "
b101 1
b101 9
b101 <
1)
#130
0)
#134
b1010 !
b1010 /
b1010 4
b1010 0
b1010 5
b1010 8
b1010 ;
b1010 :
b100 %
b100 ,
b100 7
#135
b1111 !
b1111 /
b1111 4
b1111 0
b1111 5
b1111 8
b1111 ;
b1111 :
b1010 "
b1010 1
b1010 9
b1010 <
1)
#140
0)
#144
b1010 !
b1010 /
b1010 4
b1010 0
b1010 5
b1010 8
b1010 ;
b1010 :
bz .
bz 3
bz 6
b0 %
b0 ,
b0 7
0*
0&
#145
1)
#150
0)
#155
1)
#160
0)
#165
1)
#170
0)
#175
1)
#180
0)
#185
1)
#190
0)
#195
1)
#200
0)
